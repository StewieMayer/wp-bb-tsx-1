{
  "compilerOptions": {
    "target": "es6",
    "module": "esnext",
    "lib": ["ESNext", "DOM", "DOM.Iterable"],
    "moduleResolution": "node",
    "esModuleInterop": true,
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "jsx": "react-jsx",
    "isolatedModules": true,
    "resolveJsonModule": true,

    //Automatically generated by the npx tsc --init command
    //-----------------------------------------------------//
    // Keeps the original module syntax in the output, useful for preserving module structure.
    "verbatimModuleSyntax": true,
    /* 
      Prevents imports that have side effects from being included in the output if they are not used.
      True by default, but can be set to false if you want to allow side-effect imports.
    */
    "noUncheckedSideEffectImports": false,
    //Tells TypeScript to use every file as a module, even if it doesn't have any imports or exports.
    "moduleDetection": "force",
    /* 
      Tells TypeScript what kind of type packages to look for when resolving types. 
      "types":["jest", "node"] would include types from Jest and Node.js.
    */
    "types": [],
    // Generates source maps for debugging, allowing you to trace back to the original TypeScript code.
    "sourceMap": true,
    /*
      Generates declaration files (.d.ts) for the TypeScript code, 
      which is useful for libraries or when you want to expose types to other projects.
      True by default, but can be set to false if you don't want declaration files.
      Not recommended for frontend projects.
    */
    "declaration": false,
    /*
      Generates source maps for declaration files, allowing you to trace back to the original TypeScript code in declaration files.
      This is useful for debugging and understanding the types in your project. 
      True by default, but can be set to false if you don't need declaration maps.
      Not recommended for frontend projects.
    */
    "declarationMap": false,
    /*
      Allows TypeScript to check for unused variables and parameters, helping to keep the code clean and maintainable.
      True by default, but can be set to false if you want to disable this check.
    */
    "noUncheckedIndexedAccess": false,
    /*
      Allows TypeScript to check for unused variables and parameters, helping to keep the code clean and maintainable.
      True by default, but can be set to false if you want to disable this check.
    */
    "exactOptionalPropertyTypes": false
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}
