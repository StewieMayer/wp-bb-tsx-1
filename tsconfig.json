{
  // Visit https://aka.ms/tsconfig to read more about this file
  "compilerOptions": {
    // Version of JavaScript to compile to ES&nbsp;6 is a good choice for modern browsers
    "target": "es6",
    // Module system to use, can be changed to "commonjs" for Node.js compatibility
    "module": "esnext",
    // Libraries to include in the compilation
    "lib": [
      "ESNext",
      "DOM",
      "DOM.Iterable"
    ],
    /* 
      Tells TypeScript how to resolve modules when importing. 
      It looks for modules in node_modules and follows Node.js resolution logic (index.ts, index.d.ts, etc). 
     */
    "moduleResolution": "node",
    /* 
      Allows to import CommonJS modules in a way that is compatible with ES modules. (import * from 'module' instead of require('module'))
      This is useful when using libraries that are not written in TypeScript or do not have type definitions
    */
    "esModuleInterop": true,
    // Allows js files to be into the project, useful for mixed JS/TS projects
    "allowJs": true,
    // Avoids to check types on node_modules, speeding up the compilation process
    "skipLibCheck": true,
    // Enables all strict type-checking options
    "strict": true,
    /* 
      Avoids issues with case sensitivity in file names, especially on case-insensitive file systems. 
      (Home.tsx imported as home.tsx will throw an error)
     */
    "forceConsistentCasingInFileNames": true,
    /* 
      Prevents TypeScript from emitting output files (js), useful when using Babel for transpilation.
      This is often used in projects where Babel handles the final output, allowing TypeScript to focus on type checking.
      If you want TypeScript to emit JavaScript files, set this to false.
     */
    "noEmit": true,
    /*
      JSX code generation mode, "react-jsx" is for React 17+ with the new JSX transform.
      It means that you don't need to import React in every file that uses JSX.
     */
    "jsx": "react-jsx",
    // Ensures that each file can be transpiled independently, which is useful for projects using Babel or other bundlers.
    "isolatedModules": true,
    // Allows importing JSON files as modules (import data from '.data.json'), useful for configuration files or static data.
    "resolveJsonModule": true,
    //Automatically generated by the npx tsc --init command
    //-----------------------------------------------------//
    // Keeps the original module syntax in the output, useful for preserving module structure.
    "verbatimModuleSyntax": true,
    /* 
      Prevents imports that have side effects from being included in the output if they are not used.
      True by default, but can be set to false if you want to allow side-effect imports.
    */
    "noUncheckedSideEffectImports": false,
    //Tells TypeScript to use every file as a module, even if it doesn't have any imports or exports.
    "moduleDetection": "force",
    /* 
      Tells TypeScript what kind of type packages to look for when resolving types. 
      "types":["jest", "node"] would include types from Jest and Node.js.
    */
    "types": [],
    // Generates source maps for debugging, allowing you to trace back to the original TypeScript code.
    "sourceMap": true, 
    /*
      Generates declaration files (.d.ts) for the TypeScript code, 
      which is useful for libraries or when you want to expose types to other projects.
      True by default, but can be set to false if you don't want declaration files.
      Not recommended for frontend projects.
    */
    "declaration": false,
    /*
      Generates source maps for declaration files, allowing you to trace back to the original TypeScript code in declaration files.
      This is useful for debugging and understanding the types in your project. 
      True by default, but can be set to false if you don't need declaration maps.
      Not recommended for frontend projects.
    */  
    "declarationMap": false,
    /*
      Allows TypeScript to check for unused variables and parameters, helping to keep the code clean and maintainable.
      True by default, but can be set to false if you want to disable this check.
    */ 
    "noUncheckedIndexedAccess": false,
    /*
      Allows TypeScript to check for unused variables and parameters, helping to keep the code clean and maintainable.
      True by default, but can be set to false if you want to disable this check.
    */ 
    "exactOptionalPropertyTypes": false, 
  },
  "include": [
    // Include all TypeScript and JavaScript files in the src directory and its subdirectories
    "src/**/*"
  ],
  "exclude": [
    // Exclude the node_modules directory, as it contains third-party libraries and types
    "node_modules",
    // Exclude the dist directory, as it contains the output files generated by the build process
    "dist"
  ]
}